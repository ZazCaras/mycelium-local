services:
  nginx:
    image: nginx:latest
    ports:
      - "8080:80"  # Puerto 8080 para Nginx
    volumes:
      - ./nginx-config/nginx.conf:/etc/nginx/templates/default.conf.template
    networks:
      - mycelium-local

  api:
    image: localhost/mycelium-local_api:dev
    ports:
      - "8081:8080"  # Puerto 8081 para el servicio API
    volumes:
      - ./api:/app:rw
      - gradle:/var/lib/gradle:rw
    build:
      context: api
      dockerfile: Dockerfile.dev
    networks:
      - mycelium-local
    environment:
      - VIRTUAL_PATH=~^/(api|swagger|swagger-ui)
      - VIRTUAL_PORT=8080
    depends_on:
      - db

  client:
    image: localhost/mycelium-local_client:dev
    ports:
      - "3000:3000"  # Puerto 3000 para el cliente
    volumes:
      - ./client:/app:rw
    build:
      context: client
      dockerfile: Dockerfile.dev
    networks:
      - mycelium-local
    environment:
      - VIRTUAL_PATH=/
      - VIRTUAL_PORT=3000

  db:
    image: container-registry.oracle.com/database/express:21.3.0-xe
    ports:
      - "1521:1521"  # Puerto 1521 para la base de datos
    restart: unless-stopped
    environment:
      ORACLE_PWD: "12345"
    volumes:
      - oracledb:/opt/oracle/oradata
    networks:
      - mycelium-local


  jenkins:
    image: 127.0.0.1:5000/jenkins/jenkins:lts-jdk17
    build:
      context: .
      dockerfile: DockerfileJenkins
    privileged: true
    ports:
      - 7000:8080
    volumes:
      - jenkins_data:/var/jenkins_home
    networks:
      - mycelium-local

  # drone: 
  #   image: drone/drone:2
  #   networks:
  #     - mycelium-drone
  #     - mycelium-local
  #   ports:
  #     - "7001:80"
  #   volumes:
  #     - /var/lib/drone:/data
  #   env_file:
  #     - .env
  #   environment:
  #     - DRONE_RPC_SECRET=98603fac90abd2dd2fb4de2c6997e573
  #     - DRONE_SERVER_HOST=150.136.162.189:9051
  #     - DRONE_SERVER_PROTO=http

  # drone-runner: 
  #   image: drone/drone-runner-docker:1
  #   networks:
  #     - mycelium-drone
  #     - mycelium-local
  #   volumes: 
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - DRONE_RPC_PROTO=http
  #     - DRONE_RPC_HOST=drone:80
  #     - DRONE_RPC_SECRET=98603fac90abd2dd2fb4de2c6997e573
  #     - DRONE_RUNNER_CAPACITY=2
  #     - DRONE_RUNNER_NAME=mycelium-runner
  #   ports:
  #     - "7002:7002"

  sonarqube:
    image: sonarqube:lts
    ports:
      - "9000:9000"
    networks:
      - mycelium-sonarqube
      - mycelium-local
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: Test12345
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions

  sonarqube-db:
    image: postgres
    networks:
      - mycelium-sonarqube
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=Test12345
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus-config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cadvisor
    networks:
      - mycelium-local
    
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - 9091:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - api
      - client
      - db
    networks:
      - mycelium-local

  grafana:
    image: grafana/grafana:latest
    ports:
      - 9092:3000 
    networks:
      - mycelium-local
    environment:
      - GF_SERVER_ROOT_URL=http://grafana:3000
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus


  local-registry:
    image: docker.io/registry:2
    expose:
      - 5000
    networks:
      - mycelium-local

volumes:
  oracledb: 
  gradle: 
  jenkins_data: 
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  postgresql:
  postgresql_data:
  grafana-data:

networks:
  mycelium-local:
    driver: bridge
  mycelium-sonarqube:
    driver: bridge
  mycelium-drone:
    driver: bridge